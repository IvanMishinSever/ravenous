{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","index.js","registerServiceWorker.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","handleSortByChange","sortByOption","setState","Object","keys","sortByOptionsValue","onClick","getSortByClass","event","target","value","searchYelp","preventDefault","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","zip_code","categories","title","review_count","App","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error"],"mappings":"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","file":"static/js/main.e03efa67.chunk.js","sourcesContent":["import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport './Business.css';\r\n\r\n\r\n/*\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt=''/>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                    <p>1{this.props.business.address}</p>\r\n                    <p>B{this.props.business.city}</p>\r\n                    <p>{this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                    <h3>{this.props.business.category}</h3>\r\n                    <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                    <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\nclass Business extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"Business\">\r\n          <div className=\"image-container\">\r\n            <img src={this.props.business.imageSrc} alt=''/>\r\n          </div>\r\n          <h2>{this.props.business.name}</h2>\r\n          <div className=\"Business-information\">\r\n            <div className=\"Business-address\">\r\n              <p>{this.props.business.address}</p>\r\n              <p>{this.props.business.city}</p>\r\n              <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\r\n            </div>\r\n            <div className=\"Business-reviews\">\r\n              <h3>{this.props.business.category.toUpperCase()}</h3>\r\n              <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\r\n              <p>{`${this.props.business.reviewCount} reviews`}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\nexport default Business;","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport  './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n/*\r\nclass  BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div  className=\"BusinessList\">\r\n                {this.props.businesses.map(business => {\r\n                    return <Business key={business.id} business={business} />\r\n                })}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"BusinessList\">\r\n          {\r\n            this.props.businesses.map(business => {\r\n              return <Business business={business} key={business.id} />\r\n            })\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n/*const sortByOptions = {\r\n    'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n\r\n}\r\n*/\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // by default there is NO data, and throw ERRROR!\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        }\r\n        this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n        \r\n        }\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleSortByChange = this.handleSortByChange.bind(this);\r\n    }\r\n    getSortByClass(sortByOption) {\r\n        if (this.state.sortBy === sortByOption) {\r\n            return 'active';\r\n        } \r\n            return '';\r\n        }\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({sortBy: sortByOption});\r\n    }\r\n//Handle a Sorting Option Change (On Click)\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionsValue = this.sortByOptions[sortByOption];\r\n            return <li onClick ={this.handleSortByChange.bind(this, sortByOptionsValue)} className={this.getSortByClass(sortByOptionsValue)} key={sortByOptionsValue}>{sortByOption}</li>;\r\n        });\r\n    }\r\n\r\n    //Handle a Term or Location Change\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n    }\r\n    handleLocationChange(event) {\r\n        this.setState({\r\n            location: event.target.value\r\n        });\r\n    }\r\n    //Handle a Search\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault(); /// Интересная функция)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                    {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div onClick={this.handleSearch} className=\"SearchBar-submit\">\r\n                    <a>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchBar;","const apiKey = 'ZyPAYE3ZxcB6eWBOFE84qYDF027HKeiN7PTm5J7oZdOAWBOdL1fu1yAPL73JTGwt_V9VBrG2cnysFX3a7ihbtrKR3LvqiVMwbI1wiUNCDB4s4yD0L7ePphyF35iaX3Yx'; \r\n\r\n/* const Yelp = {\r\n    searchYelp(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n        {headers: {Authorization: `Bearer ${apiKey}`}\r\n    }).then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        } \r\n        throw new Error('REQUEST FAILED!!!!');\r\n        \r\n    }).then (jsonResponse => {\r\n            if (jsonResponse.businesses) {\r\n               return jsonResponse.businesses.map(((business) => {\r\n                   console.log(business);\r\n                return {\r\n                    id: business.id,\r\n                    imageSrc: business.image_url,\r\n                    name: business.name,\r\n                    address: business.location.address1,\r\n                    city: business.location.city,\r\n                    state: business.location.state,\r\n                    zipCode: business.location.zip_code,\r\n                    category: business.categories[0].title,\r\n                    rating: business.rating,\r\n                    reviewCount: business.review_count\r\n               }}));\r\n            }\r\n        })\r\n    }\r\n}\r\n*/\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n      return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, \r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (jsonResponse.businesses) {\r\n            console.log(jsonResponse.businesses);\r\n          return jsonResponse.businesses.map(business => ({\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address1,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count\r\n          }));\r\n        }\r\n      });\r\n    }\r\n  };\r\nexport default Yelp;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nimport Yelp from '../../util/Yelp';\n\n/*\nconst business = {\n  imageSrc: 'https://content.codecademy.com/programs/react/ravenous/pizza.jpg',\n  name: 'MarginOtto Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n};\n\nconst businesses = [business, business, business, business, business, business, business, business];\n*/\n/*\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this)\n  }\n  searchYelp(term, location, sortBy) {\n    //console.log('Searching Yelp with Pizza, Brooklyn, best_match');\n      Yelp.searchYelp(term, location, sortBy).then(businesses => {\n        this.setState(\n          {businesses: businesses }\n        )\n      });\n\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses}/> \n      </div>\n    )\n  }\n}\n*/\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}